// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  role     Role      @default(USER)

  reviews Review[]
  bookings Booking[]
  tours  Tour[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

}

enum Role {
  USER
  ADMIN
}

model Tour {
  id    String @id @default(cuid())
  title String
  slug  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description String
  image       String
  price       Float
  duration    Int
  maxGroupSize Int
  difficulty  Difficulty
  ratings     Float
  ratingsQuantity Int
  summary     String
  imageCover  String
  images      String[]
  startDates  DateTime[]
  reviews     Review[]
  bookings    Booking[]
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Difficulty {
  EASY
  MEDIUM
  DIFFICULT
}

model Review {
  id    String @id @default(cuid())
  review String
  rating Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tour   Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Booking {
  id    String @id @default(cuid())
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paid Boolean
  startDateTime DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId String
}